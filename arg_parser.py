from argparse import ArgumentParser, Namespace
from distutils.util import strtobool
from typing import List, Optional


def _create_default_parser() -> ArgumentParser:
    parser = ArgumentParser(description='NSE ADF Default params',
                            add_help=False)

    parser.add_argument('pipeline_run_id',
                        help='Pipeline execution Id generated by azure')
    parser.add_argument('correlation_id',
                        help=f'string used as a prefix for objects in non '
                             f'production environments')

    return parser


def parse_default_args(raw_args: Optional[List[str]] = None) -> Namespace:
    parser = _create_default_parser()

    parsed_args = parser.parse_args(raw_args)

    return parsed_args


def parse_raw_to_bronze_args(
        raw_args: Optional[List[str]] = None
) -> Namespace:
    default_parser = _create_default_parser()

    raw_to_bronze_args_parser = ArgumentParser(parents=[default_parser])

    raw_to_bronze_args_parser.add_argument(
        'storage_account',
        help='TODO: Improve this description based on the script')
    raw_to_bronze_args_parser.add_argument(
        'entity',
        help='NSE entity name | [brazil|china|confianza|iptqemea|iptqna]'
    )
    raw_to_bronze_args_parser.add_argument(
        'table_name',
        help='Raw table name | Ex.: ultimate_values'
    )

    parsed_args = raw_to_bronze_args_parser.parse_args(raw_args)

    return parsed_args


def parse_silver_to_gold_args(
        raw_args: Optional[List[str]] = None
) -> Namespace:
    default_parser = _create_default_parser()

    silver_to_gold_args_parser = ArgumentParser(parents=[default_parser])

    silver_to_gold_args_parser.add_argument('key_gen_service_url',
                                            help='Key Generation Service URL')
    silver_to_gold_args_parser.add_argument('oauth_tenant_id',
                                            help='OAuth - Tenant Id')
    silver_to_gold_args_parser.add_argument('oauth_client_id',
                                            help='OAuth - Client Id')
    silver_to_gold_args_parser.add_argument('client_secret_key',
                                            help='Client Secret Key')
    silver_to_gold_args_parser.add_argument('oauth_scope',
                                            help='OAuth - Scope')

    parsed_args = silver_to_gold_args_parser.parse_args(raw_args)

    return parsed_args


def boolean(boolean_text: str) -> bool:
    return bool(strtobool(boolean_text))


def parse_bootstrap_args(raw_args: Optional[List[str]]) -> Namespace:
    bootstrap_args_parser = ArgumentParser()

    bootstrap_args_parser.add_argument('storage_account',
                                       help='Storage Account')
    bootstrap_args_parser.add_argument('correlation_id',
                                       help='Correlation Id')
    bootstrap_args_parser.add_argument(
        'bronze_overwrite_schema',
        type=boolean,
        help='Flag that indicates if bronze layer tables should be overwrite'
    )
    bootstrap_args_parser.add_argument(
        'silver_overwrite_schema',
        type=boolean,
        help='Flag that indicates if bronze layer tables should be overwrite'
    )
    bootstrap_args_parser.add_argument(
        'gold_overwrite_schema',
        type=boolean,
        help='Flag that indicates if bronze layer tables should be overwrite'
    )

    parsed_args = bootstrap_args_parser.parse_args(raw_args)

    return parsed_args


if __name__ == '__main__':
    # params = parse_default_args()
    params = parse_raw_to_bronze_args()

    print('arg-parser module')
    print('after parse_args()-----------------------------------------')
